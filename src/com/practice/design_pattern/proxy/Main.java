package com.practice.design_pattern.proxy;

/**
 *
 * 다른 객체를 대신하여 그 객체에 대한 접근을 제어하고 추가적인 기능을 제공
 * 원격 서비스에 대한 접근을 제어거나 대량의 리소스를 가진 객체를 생성하고 제어, 객체에 대한 보안 제어를 수행할 때 사용
 *
 * 보안 및 접근 제어: 객체에 대한 접근을 제어할 수 있습니다. 프록시를 통해서만 객체에 접근할 수 있으며, 접근 제어를 구현하여 조건을 충족하지 않는 경우 접근을 거부할 수 있다.
 * 추가 기능 제공: 실제 객체에 대한 호출 전후에 추가적인 작업을 수행할 수 있다. 객체의 생성 및 초기화를 지연시킬 수 있고. 실제 객체에 대한 접근을 제어하면서 추가적인 기능을 제공할 수 있다.
 * 성능 최적화: 리소스 집약적인 작업을 지연하거나 캐싱할 수 있습니다. 가상 프록시는 실제 객체를 필요로 하는 시점에 생성하므로 초기 부하를 줄일 수 있다.
 * 또한, 결과를 캐싱하여 동일한 요청에 대한 반복 작업을 피할 수 있다.
 * 코드 분리 및 유연성: 실제 객체와 프록시 객체를 분리하여 코드를 구성할 수 있다.객체의 변경 없이 프록시를 수정하거나 교체함으로써 기능을 추가하거나 동작을 변경할 수 있다.
 * 리소스 관리: 예를 들어, 원격 프록시는 원격 서비스에 대한 연결을 필요로 하는 경우, 연결을 유지하거나 재사용함으로써 리소스를 효율적으로 관리할 수 있다.
 *
 */
public class Main {

    public static void main(String[] args) {

        Dog dog = new JindoMom(false);
        dog.action();

        System.out.println("====================================");

        Dog dog2 = new JindoMom(true);
        dog2.action();

    }
}
